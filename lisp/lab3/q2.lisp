(defstruct person
  name age)

(defun filter-ages (people threshold)
  (let* ((length (length people))
         (result (make-array 0 :adjustable t :fill-pointer 0)))
    (do ((i 0 (1+ i)))
        ((>= i length) result)
      (let ((person (aref people i)))
        (when (> (person-age person) threshold)
          (vector-push-extend (person-name person) result))))))


(defun array-group (a b)
  (let ((res (make-array 0 :adjustable t :fill-pointer 0)))
    (dotimes (i (min (length a) (length b)))
      (let ((sa (make-array 2)))
        (setf (aref sa 0) (aref a i))
        (setf (aref sa 1) (aref b i))
        (vector-push-extend sa res)))
    (if (> (length a) (length b))
        (do ((i (length b) (1+ i)))
            ((= i (length a)))
          (let ((sa (make-array 2)))
            (setf (aref sa 0) (aref a i))
            (setf (aref sa 1) nil)
            (vector-push-extend sa res))))
    (if (> (length b) (length a))
        (do ((i (length a) (1+ i)))
            ((= i (length b)))
          (let ((sa (make-array 2)))
            (setf (aref sa 0) nil)
            (setf (aref sa 1) (aref b i))
            (vector-push-extend sa res))))
    res))
