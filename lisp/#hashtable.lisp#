"HASHTABLES

OPEN-ADDRESSING AND LINEAR PROBING
h'(k) = k mod 10

insert element: 300 mod 10 = 0, 300 -> 0
350 mod 10 = 0, 350 -> 0 (filled) -> 1 

delete element: 350 -> 0 -> 1 DELEted (mark it)

insert: 682 mod 10 -> 2 (filled) -> 3
insert element overrides the deleted element position

CLUSTERING
linear probing leads to clustering
both tables are 50% full, but one is evenly filled and the other consecutively
would take O(n) - consecutive, O(1) - evenly

"
; from week 9 lecture

; initialize the hashtable first 

(defstruct ht
  array
  (count 0)
  comp)



(defparameter *size* 16)


(defun ht-create (kvs &key (test 'eql)) ;optional values here is test (comparative operator)
  
  "creates a hash table object, and adds the key value pairs."

  (let ((res (make-ht :array (make-array *size* :initial-element nil)
                      :comp test)))
    (loop :for (k v) :in kvs :do
      (ht-add k v res))
    res))

(defun ht-get (key ht)
  (let* ((size (length (ht-array ht)))
	 (start (rem (sxhash key) size)))
    (do* ((probe 0 (1+ probe))
	  (i start (rem (+ start probe) size))
	  (item (aref (ht-array ht) start) (aref (ht-array ht) i)))
	 ((or (null item) (= probe size)))
      (when (funcall (ht-comp ht) key (car item))
	(return (values (cdr item) i))))))

;; we implement open addressing with linear probing
;; funcall compares the key with the item in probe and returns the key value using cdr.
;; we also return the probe value (i) just to see how many probes we used smthn like that


(defun ht-set (key value ht)
  (multiple-value-bind (v i) (ht-get key ht)
    (when v ; ht-get found key value?
      (setf (cdr (aref (ht-array ht) i)) value))))


(defun ht-add (key val ht)
  (let* ((temp (ht-array ht))
	 (size (length temp)))
    (flet ((add-item (k v) ; FLET defines function ADD-ITEM locally
	     (do* ((count 0 (1+ count))
		  (start (rem (sxhash k) size))
		  (i start (rem (+ start count) size)))
		 ((null (aref (ht-array ht) i)) ; loop stop test
		  (setf (aref (ht-array ht) i) (cons k v)))))) ; result form
      (when (= (ht-count ht) size)
	;; when the backing array is full
	;; expand it to have the length equal to the next power of 2
	(setf size (expt 2 (ceiling (log (1+ (ht-count ht)) 2)))
	      (ht-array ht) (make-array size :initial-element nil))
	;; and re-add its contents
	(rtl:dovec (item temp) ; similar to DOLIST but for arrays
	  (add-item (car item) (cdr item))))
      ;; Adds the new item
      (incf (ht-count ht))
      (add-item key val))))

(defun ht-print (ht)
  (let* ((kvs (ht-array ht))
	 (size (length kvs)))
    (dotimes (i size)
      (let ((kv (aref kvs i)))
	(when kv (format t "Key: ~s ~a Value: ~s~%" (car kv) #\tab (cdr kv)))))))

