"RECURSIVE FUNCTIONS HAVE A BASE CASE, IT CALLS ITSELF
1. TAIL RECURSIVE - END OF THE STATEMENT CALLS RECURSION
2. NON-TAIL RECURSIVE - DOES NOT END IN RECURSIVE CALL, BUT HAS A DIFFERENT OPERATION"


(defun merge-sorted-lists (lst1 lst2 comp &optional (acc '()))
  ;; base case: returns the reverse of the accumulator when both lst1 and lst2 are empty
  (cond ((and (null lst1) (null lst2)) (reverse acc))
            ;; if lst1 is empty, add the first element of lst2 to the front of the accumulator

        ((null lst1) (merge-sorted-lists lst1 (cdr lst2) comp (cons (car lst2) acc)))

            ;; if lst2 is empty, add the first element of lst1 to the front of the accumulator

            ((null lst2) (merge-sorted-lists (cdr lst1) lst2 comp (cons (car lst1) acc)))

            ;; both lists are not empty, if the comparison between the first element of lst1 and lst2 is true,
                                        ;add the element from lst1 to the front of the accumulator

            ((funcall comp (car lst1) (car lst2)) (merge-sorted-lists (cdr lst1) lst2 comp (cons (car lst1) acc)))

            ;; the comparison between the first element of lst1 and lst2 is false, add the element from lst2
            ;to the front of the accumulator

            (t (merge-sorted-lists lst1 (cdr lst2) comp (cons (car lst2) acc)))))
